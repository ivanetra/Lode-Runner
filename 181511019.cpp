/* 	File 		: 18151019.cpp
*	Deskripsi 	: Body dari modul yang dikerjakan oleh Lia
*	Dibuat Oleh	: Lia Purnamasari - 181511019
*/

#include "header/181511019.h"

bool sahur=true;

bool isLevelUp(int level, int loot_e){
	if(isObjectiveClear(level, loot_e)){
		return true;
	} else{
		return false;
	}
}

void LevelUp(address *h, int *level, int *complete){
	int brs, klm;
	
		printf("\n LEVEL UP");

		brs=i;
		for(klm=j;klm<=25;klm++)
		{
			(*h)->map[brs][klm]=2;
			draw_object(*h, brs, klm);
		}
		for(brs=i;brs>=0;brs--)
		{
			(*h)->map[brs][klm]=3;
			if ((*h)->map[brs][klm]== 3){
			readimagefile("gambar//WIN//Tangga_W.jpg", 0+32*klm, 0+32*brs, 32+32*klm, 32+32*brs);
		}
		} 
		while (j!=26){
			if (j%2==0){
				readimagefile("gambar//Menggantung_Kanan1.jpg", 0+32*j, 0+32*i, 32+32*j, 32+32*i);
			} else{
				readimagefile("gambar//Menggantung_Kanan2.jpg", 0+32*j, 0+32*i, 32+32*j, 32+32*i);
			}
			delay(100);
			(*h)->map[i][j-1]=2;
			draw_object(*h, i, j);
				j++;
		}
		while (i!=-1){
			if (i%2==0){
				readimagefile("gambar//WIN//NW_1.jpg", 0+32*j, 0+32*i, 32+32*j, 32+32*i);
			} else{
				readimagefile("gambar//WIN//NW_2.jpg", 0+32*j, 0+32*i, 32+32*j, 32+32*i);
			}
			delay(100);
			(*h)->map[i+1][j]=3;
			draw_object(*h, i, j);
				i--;
		}
	if((*h)->next != NULL){
		*h=(*h)->next;
	} else {
		*complete=1;
		printf("GAME COMPLETED");
	}
	
	(*level)++; printf("\nLEVEL= %d", *level);
	cleardevice();
	settextjustify(LEFT_TEXT, TOP_TEXT);	
	outtextxy(450,250,"LEVEL COMPLETED....");
	delay(2000);
	cleardevice();
}

/*int MAP(int level, int baris, int kolom){
	if (level==1){
		int Array[19][27] = {
		{6, 6, 6, 6, 6, 6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6, 6},
		{6, 0, 0, 0, 0, 0,	0, 	0, 	0, 	0, 	0, 	0, 	0, 	0,	0, 	0, 	0, 	0,	0,	0,	0,	0,	0,	0,	0,	0, 6},
		{6, 1,	1, 1, 1, 1,	3,	1,	1,	1,	1,	1,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0, 6},
		{6, 0,	0, 0, 0, 0,	3,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	0,	0,	0,	0,	0,	0,	0,	0,	0, 6},
		{6, 0,	0, 0, 0, 0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0, 6},
		{6, 0,	0, 0, 0, 0,	3,	0,	0,	0,	0,	0,	1,	1,	3,	1,	0,	0,	1,	1,	1,	1,	1,	3,	1,	1, 6},
		{6, 0,	0, 0, 0, 0,	3,	0,	0,	0,	0,	0,	1,	1,	3,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0, 6},
		{6, 0,	0, 0, 0, 0,	3,	0,	0,	0,	0,	0,	1,	1, 	3,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0, 6},
		{6, 1,	3, 1, 1, 1,	1,	2,	2,	2,	0,	0,	1,	1,	1,	1,	1,	1,	1,	1,	3,	1,	1,	1,	1,	1, 6},
		{6, 0,	3, 0, 0, 0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	0, 6},
		{6, 0,	3, 0, 0, 0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	0, 6},
		{6, 1,	1, 1, 1, 1,	1,	3,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	3,	0,	0,	0,	0,	0, 6},
		{6, 0,	0, 0, 0, 0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	0, 6},
		{6, 0,	0, 0, 0, 0,	0,	3,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	3,	0,	0,	0,	0,	0, 6},
		{6, 0,	0, 0, 0, 0,	0,	3,	5,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	0, 6},
		{6, 0,	0, 0, 3, 1,	1,	1,	1,	0,	0,	0,	0,	0,	0,	5,	0,	0,	0,	0,	1,	1,	1,	1,	3,	0, 6},
		{6, 0,	0, 0, 3, 5,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0, 6},
		{6, 1,	1, 1, 1, 1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1, 6},
		{6, 6, 6, 6, 6, 6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6, 6}
		};
	//Posisi Karakter Blu di level ini
	posisi_karakter(level);
	return Array[baris][kolom];
	}
}*/

void MAP(address *curMAP)
{
	int A[19][27] = {
		{6, 6, 6, 6, 6, 6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6, 6},
		{6, 0, 5, 0, 0, 0,	0, 	0, 	0, 	0, 	0, 	0, 	0, 	0,	0, 	0, 	0, 	0,	0,	0,	0,	0,	0,	0,	0,	0, 6},
		{6, 1,	1, 1, 1, 1,	3,	1,	1,	1,	1,	1,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0, 6},
		{6, 0,	0, 0, 0, 0,	3,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	0,	0,	0,	0,	0,	0,	0,	0,	0, 6},
		{6, 0,	0, 0, 0, 0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	5, 6},
		{6, 0,	0, 0, 0, 0,	3,	0,	0,	0,	0,	0,	1,	1,	3,	1,	0,	0,	1,	1,	1,	1,	1,	3,	1,	1, 6},
		{6, 0,	0, 0, 0, 0,	3,	0,	0,	0,	0,	0,	1,	1,	3,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0, 6},
		{6, 0,	0, 0, 0, 0,	3,	0,	0,	0,	0,	0,	1,	1, 	3,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0, 6},
		{6, 1,	3, 1, 1, 1,	1,	2,	2,	2,	0,	0,	1,	1,	1,	1,	1,	1,	1,	1,	3,	1,	1,	1,	1,	1, 6},
		{6, 0,	3, 0, 0, 0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	0, 6},
		{6, 0,	3, 0, 0, 0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	0, 6},
		{6, 1,	1, 1, 1, 1,	1,	3,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	3,	0,	0,	0,	0,	0, 6},
		{6, 0,	0, 0, 0, 0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	0, 6},
		{6, 0,	0, 0, 0, 0,	0,	3,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	3,	0,	0,	0,	0,	0, 6},
		{6, 0,	0, 0, 0, 0,	0,	3,	5,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	0, 6},
		{6, 0,	0, 0, 3, 1,	1,	1,	1,	0,	0,	0,	0,	0,	0,	5,	0,	0,	0,	0,	1,	1,	1,	1,	3,	0, 6},
		{6, 0,	0, 0, 3, 5,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0, 6},
		{6, 1,	1, 1, 1, 1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1, 6},
		{6, 6, 6, 6, 6, 6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6, 6}
		};
	int B[19][27] = {
		{6, 6, 6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6, 6},
		{6, 0,	0,	5,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3, 6},
		{6, 3,	1,	1,	1,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3, 6},
		{6, 3,	1,	1,	1,	3,	0,	0,	0,	0,	3,	1,	1,	1,	1,	1,	1,	1,	1,	1,	3,	0,	0,	0,	0,	3, 6},
		{6, 3,	0,	0,	0,	3,	0,	0,	0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	3, 6},
		{6, 3,	0,	0,	0,	3,	0,	0,	0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	3, 6},
		{6, 3,	0,	0,	0,	3,	0,	0,	0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	3, 6},
		{6, 3,	1,	1,	1,	3,	2,	2,	2,	2,	3,	2,	2,	2,	2,	2,	2,	2,	2,	2,	3,	0,	0,	5,	0,	3, 6},
		{6, 3,	0,	0,	0,	3,	0,	0,	0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	1,	1,	1,	1,	3, 6},
		{6, 3,	0,	0,	0,	3,	0,	0,	0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	3, 6},
		{6, 3,	0,	0,	0,	3,	0,	0,	0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	3, 6},
		{6, 3,	0,	0,	0,	3,	0,	0,	0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	3, 6},
		{6, 1,  0,	0,	1,	1,	1,	1,	1,	1,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	1,	3,	1,	1,	1, 6},
		{6, 1,  0,	0,	1,	0,	0,	0,	5,	0,	3,	0,	0,	0,	2,	2,	2,	2,	2,	2,	3,	0,	3,	0,	5,	0, 6},
		{6, 1,	0,	0,	1,	1,	1,	3,	1,	1,	3,	1,	1,	1,	1,	0,	0,	0,	0,	0,	3,	0,	1,	1,	1,	1, 6},
		{6, 1,	5,	0,	0,	0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0, 6},
		{6, 1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1, 6},
		{6, 1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1, 6},
		{6, 6, 6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6, 6}
		};
	int C[19][27] = {
		{6, 6, 6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6, 6},
		{6, 0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3, 6},
		{6, 0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	5,	3, 6},
		{6, 0,	0,	0,	0,	0,	3,	2,	2,	2,	2,	2,	0,	0,	0,	0,	0,	0,	0,	0,	0,	2,	2,	2,	2,	3, 6},
		{6, 0,	5,	0,	0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3, 6},
		{6, 1,	1,	1,	1,	1,	3,	0,	0,	0,	0,	0,	0,	0,	5,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3, 6},
		{6, 1,	5,	0,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	3, 6},
		{6, 1,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3, 6},
		{6, 0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3, 6},
		{6, 0,	0,	0,	0,	0,	0,	0,	0,	3,	1,	1,	1,	1,	1,	1,	3,	0,	0,	0,	0,	0,	5,	0,	0,	3, 6},
		{6, 3,	1,	1,	1,	1,	1,	1,	3,	3,	0,	0,	0,	0,	0,	0,	3,	1,	1,	1,	1,	1,	1,	1,	1,	3, 6},
		{6, 3,	5,	0,	0,	0,	0,	1,	3,	3,	0,	0,	0,	0,	0,	0,	3,	1,	1,	0,	0,	0,	0,	0,	0,	3, 6},
		{6, 3,	1,	1,	1,	2,	2,	2,	3,	1,	0,	0,	0,	0,	0,	0,	1,	1,	2,	2,	2,	2,	2,	2,	2,	3, 6},
		{6, 3,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	3, 6},
		{6, 3,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	1,	1,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	5,	3, 6},
		{6, 3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	5,	0,	0,	0,	0,	0,	0,	0,	3,	1,	1,	1, 6},
		{6, 1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1, 6},
		{6, 1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1, 6},
		{6, 6, 6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6, 6}
		};
	int D[19][27] = {
		{6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6},
		{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	5,	5,	0},
		{1,	3,	1,	1,	1,	1,	1,	1,	1,	1,	0,	0,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	6,	6,	6,	3},
		{0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3},
		{0,	3,	5,	0,	0,	5,	0,	0,	0,	0,	0,	0,	5,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3},
		{1,	1,	1,	3,	1,	1,	0,	0,	0,	1,	1,	1,	1,	1,	1,	1,	1,	1,	2,	2,	2,	0,	0,	0,	0,	0,	3},
		{6,	6,	6,	3,	0,	0,	0,	0,	0,	1,	1,	1,	1,	1,	1,	1,	1,	1,	0,	0,	1,	1,	3,	1,	1,	1,	1},
		{0,	0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0},
		{0,	0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0},
		{1,	3,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	3,	0,	0,	0,	0,	3,	0,	0,	0,	0},
		{0,	3,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	3,	0,	0,	0,	0,	3,	0,	0,	0,	0},
		{0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	3,	6,	6,	6,	3},
		{0,	3,	0,	5,	0,	0,	0,	1,	1,	1,	1,	1,	1,	1,	1,	1,	6,	3,	6,	1,	1,	1,	3,	6,	6,	6,	3},
		{1,	1,	1,	1,	3,	1,	1,	2,	2,	2,	2,	2,	2,	2,	2,	2,	6,	3,	6,	1,	1,	1,	3,	0,	0,	0,	3},
		{6,	6,	6,	0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	3,	0,	0,	0,	3},
		{0,	0,	0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	3,	0,	0,	0,	3},
		{1,	0,	0,	0,	3,	0,	0,	5,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	5,	0,	3,	0,	0,	0,	3},
		{1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1},
		{6, 6, 	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6}
		};
	int E[19][27] = {
		{6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6},
		{6,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	6},
		{6,	0,	0,	0,	0,	5,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	5,	0,	0,	6},
		{6,	3,	1,	1,	1,	1,	1,	1,	1,	3,	1,	1,	1,	1,	1,	3,	1,	1,	1,	1,	1,	1,	1,	1,	1,	3,	6},
		{6,	3,	6,	6,	6,	6,	6,	6,	1,	3,	1,	1,	1,	1,	1,	3,	1,	1,	1,	2,	2,	2,	2,	2,	2,	3,	6},
		{6,	3,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	5,	0,	0,	0,	0,	3,	6},
		{6,	3,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	6},
		{6,	3,	1,	1,	3,	1,	1,	1,	1,	3,	0,	0,	0,	0,	0,	3,	1,	1,	1,	1,	1,	1,	1,	1,	1,	3,	6},
		{6,	3,	0,	0,	3,	0,	0,	0,	0,	3,	0,	0,	0,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	3,	6},
		{6,	3,	0,	0,	3,	0,	5,	0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	6},
		{6,	3,	1,	1,	3,	1,	1,	1,	1,	1,	1,	1,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	3,	6},
		{6,	3,	0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	5,	0,	0,	0,	0,	0,	3,	6},
		{6,	3,	1,	6,	3,	6,	1,	1,	1,	0,	0,	0,	1,	1,	1,	1,	1,	1,	6,	6,	6,	6,	6,	6,	6,	3,	6},
		{6,	3,	1,	6,	3,	6,	1,	1,	2,	2,	2,	2,	2,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	3,	6},
		{6,	3,	0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	6},
		{6,	3,	0,	0,	3,	0,	0,	0,	0,	0,	5,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	5,	3,	6},
		{6,	1,	1,	1,	1,	1,	1,	1,	6,	6,	6,	6,	6,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	6},
		{6,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	6},
		{6, 6, 	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6}
		};
	int F[19][27] = {
		{6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6},
		{6,	3,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	3,	6},
		{6,	3,	0,	5,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	5,	0,	0,	0,	0,	0,	0,	0,	3,	6},
		{6,	3,	1,	1,	1,	1,	0,	0,	0,	1,	1,	1,	1,	1,	1,	6,	6,	6,	6,	6,	1,	1,	1,	1,	1,	3,	6},
		{6,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	3,	6},
		{6,	3,	1,	1,	1,	1,	1,	1,	6,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	6},
		{6,	3,	1,	1,	1,	1,	1,	1,	6,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	5,	0,	0,	3,	6},
		{6,	3,	0,	0,	0,	0,	0,	0,	0,	3,	1,	1,	1,	1,	1,	1,	1,	3,	0,	0,	6,	6,	6,	6,	6,	3,	6},
		{6,	3,	0,	0,	0,	0,	0,	0,	0,	3,	1,	1,	1,	1,	1,	1,	1,	3,	0,	1,	1,	1,	1,	1,	1,	3,	6},
		{6,	3,	1,	1,	1,	1,	0,	0,	0,	3,	0,	0,	0,	5,	0,	0,	0,	3,	1,	1,	1,	1,	1,	1,	1,	3,	6},
		{6,	3,	2,	2,	2,	2,	2,	2,	1,	3,	6,	6,	6,	6,	6,	6,	6,	3,	2,	2,	2,	2,	2,	2,	2,	3,	6},
		{6,	3,	0,	0,	0,	0,	0,	0,	0,	3,	1,	1,	1,	2,	2,	2,	2,	3,	0,	0,	0,	0,	0,	0,	0,	3,	6},
		{6,	3,	0,	0,	0,	5,	0,	0,	0,	3,	0,	0,	0,	5,	5,	0,	0,	3,	0,	0,	0,	1,	1,	1,	1,	3,	6},
		{6,	3,	6,	6,	6,	6,	6,	6,	6,	3,	0,	0,	0,	0,	0,	0,	0,	3,	0,	6,	6,	6,	6,	6,	6,	3,	6},
		{6,	3,	1,	1,	1,	1,	1,	1,	1,	3,	0,	0,	0,	1,	0,	0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	3,	6},
		{6,	3,	0,	0,	0,	0,	5,	0,	0,	3,	0,	0,	0,	1,	0,	0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	3,	6},
		{6,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	6},
		{6,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	6},
		{6, 6, 	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6}
		};
		
	address Head, next;
	
	Create_Node (&Head);
	Isi_Node (&Head, A);	//LEVEL 1

	Create_Node (&next);
	Isi_Node (&next, B); 	//LEVEL 2
	Ins_Akhir(&Head, next);

	Create_Node (&next);
	Isi_Node (&next, C); 	//LEVEL 3
	Ins_Akhir(&Head, next);
	
	Create_Node (&next);
	Isi_Node (&next, D); 	//LEVEL 4
	Ins_Akhir(&Head, next);
	
	Create_Node (&next);
	Isi_Node (&next, E); 	//LEVEL 5
	Ins_Akhir(&Head, next);
	
	Create_Node (&next);
	Isi_Node (&next, F); 	//LEVEL 6
	Ins_Akhir(&Head, next);
	
	*curMAP=Head;
}

bool isEmpty(address p){
	if(p==NULL){
		return true;
	} else {
		return false;
	}
}

void Create_Node (address *p)
{
	*p = (address) malloc(sizeof (saya));
	(*p)->next = NULL;
}


void Ins_Akhir (address *p, address pNew)
{
    address Last;
	Last = *p;
	while(!isEmpty((Last)->next)){
		Last = Last->next;
	}
	Last->next=pNew;
}

void Isi_Node (address *p , int lvl[19][27])
{   
    int i=0, j;
    while(i < 19)
    {
    	j=0;
    	while(j < 27)
    	{
    		(*p)->map[i][j] = lvl[i][j];
    		j++;
		}
		i++;
	} 
}

void draw_object(address h, int brs, int klm){
		if (h->map[brs][klm]== 0){
			readimagefile("gambar//Obj_Blank.jpg", 0+32*klm, 0+32*brs, 32+32*klm, 32+32*brs);
		}
		if (h->map[brs][klm]== 1){
			readimagefile("gambar//Obj_Balok.jpg", 0+32*klm, 0+32*brs, 32+32*klm, 32+32*brs);
		}
		if (h->map[brs][klm]== 2){
			readimagefile("gambar//Obj_Tali.jpg", 0+32*klm, 0+32*brs, 32+32*klm, 32+32*brs);
		}
		if (h->map[brs][klm]== 3){
			readimagefile("gambar//Obj_Tangga.jpg", 0+32*klm, 0+32*brs, 32+32*klm, 32+32*brs);
		}
		if (h->map[brs][klm]== 5){
			readimagefile("gambar//Obj_Harta.jpg", 0+32*klm, 0+32*brs, 32+32*klm, 32+32*brs);
		}
		if (h->map[brs][klm]== 6){
			readimagefile("gambar//Obj_Solid.jpg", 0+32*klm, 0+32*brs, 32+32*klm, 32+32*brs);
		}
}

void show_map(address h){
	int b, k;
	setbkcolor(BLACK);
	for(b=0; b<19; b++){
		for(k=0; k<27; k++){
			draw_object(h, b, k);
		}
	}
	if(sahur == true){
		_beginthread(waktu,0,NULL);
		sahur=false;
	}
	
}

bool isBlank(int object){
	if(object == 0){
        return true;
    } else{
        return false;
    }
}

bool isTembok(int object){
    if(object == 1){
        return true;
    } else{
        return false;
    }
}

bool isTali(int object){
    if(object == 2){
        return true;
    } else{
        return false;
    }
}

bool isTangga(int object){
    if(object == 3){
        return true;
    } else{
        return false;
    }
}

bool isHarta(int object){
    if(object == 5){
        return true;
    } else{
        return false;
    }
}

bool isBeton(int object){
    if(object == 6){
        return true;
    } else{
        return false;
    }
}

bool isLubang(int object){
    if(object == 7){
        return true;
    } else{
        return false;
    }
}

bool isNyawa_berkurang(address h, int temp){
	if(isTerjebak(h, temp)){
		return true;
	}
	else{
        return false;
	}
}

void posisi_karakter(int level){
	switch(level){
		case 1 :{
			i=16; j=2;
			break;
		}
		case 2 :{
			i=15; j=3;
			break;
		}
		case 3 :{
			i=15; j=3;
			break;
		}
		case 4 :{
			i=15; j=3;
			break;
		}
		case 5 :{
			i=15; j=3;
			break;
		}
		case 6 :{
			i=15; j=3;
			break;
		}
	}
}

int hitung_nyawa(address h, int *temp, int *life, int level){
    if(isNyawa_berkurang(h, *temp)){
    		delay(1000);
			(*life)--;
			settextjustify(LEFT_TEXT, TOP_TEXT);
			outtextxy(450,250,"LIFE -1");
			delay(1000);
			posisi_karakter(level);
			*temp=0;
        }
    else{
    	*life=*life;
	}
	sprintf(msg,"Life : %d", *life);
	outtextxy(20,660,msg);
	return *life;
}
